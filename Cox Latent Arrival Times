{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "import math\n",
    "import statistics\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from statsmodels.graphics.gofplots import qqplot\n",
    "from scipy import stats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plot settings\n",
    "plt.rcParams['figure.figsize'] = (9,6)\n",
    "plt.rcParams['lines.linewidth'] = 3\n",
    "plt.rcParams['xtick.bottom'] = False\n",
    "plt.rcParams['ytick.left'] = False\n",
    "pal = [\"#FBB4AE\",\"#B3CDE3\", \"#CCEBC5\",\"#CFCCC4\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Simulating a Cox process using CIR"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Abstract: The following code simulates a one-factor model CIR process described by the following SDE:\n",
    "\n",
    "$$dr_t = a(b-r_t)dt + \\sigma \\sqrt{r_t} dW_t$$\n",
    "\n",
    "where $W_t$ is a Wiener process (modelling the random market risk factor) and $a$, $b$, $\\sigma$ are the parameters.\n",
    "\n",
    "We discretisize this process via Euler-Maruyama and Milstein method and compare which one is better. Milstein\n",
    "method is a bit more accurate and then we use that to compare it to the Non-Central Chi-Squared distribution where we find\n",
    "that our simulation is accurate."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## EM Method for CIR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# SDE model parameters\n",
    "X0 = 3\n",
    "X = X0\n",
    "theta = 6\n",
    "mu = 5\n",
    "sigma = 1\n",
    "\n",
    "# Simulation parameters\n",
    "T = 1\n",
    "N =  10\n",
    "dt = 1.0 / N\n",
    "t = np.arange(dt, 1 + dt, dt) \n",
    "# Start at dt because Y = X0 at t = 0\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# EM Approximation - big dt/big steps\n",
    "# def em_approx_big (X, plot = 'False'):\n",
    "#     dB = np.sqrt(dt) * np.random.randn(N)\n",
    "#     B  = np.cumsum(dB)\n",
    "#     t = np.arange(dt, 1 + dt, dt)  \n",
    "#     X_em_big = []\n",
    "#     X = X0 \n",
    "#     R = 2\n",
    "#     coarse_grid = np.arange(dt,1+dt,R*dt)\n",
    "#     for j in range(int(N/R)):\n",
    "#         X += theta*(mu-X) * (R*dt) + sigma*np.sqrt(X)*sum(dB[R*(j-1):R*j])\n",
    "#         X_em_big.append(X)\n",
    "#     if plot == 'True':\n",
    "#         plt.plot(coarse_grid, X_em_big, label=\"EM ($X_t$): Coarse Grid\", color=pal[1], ls='--')\n",
    "#         plt.title('E-M Approximation'); plt.xlabel('t'); plt.legend(loc = 2);\n",
    "#     return(X_em_big)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# EM Approximation - small dt\n",
    "def em_approx_small (X, theta, mu, sigma, plot = 'False'):\n",
    "    dt = 1.0 / N\n",
    "    dB = np.sqrt(dt) * np.random.randn(N)\n",
    "    B  = np.cumsum(dB)\n",
    "    t = np.arange(dt, 1 + dt, dt) \n",
    "    X_em_small = []\n",
    "    X = X0\n",
    "    for j in range(N):  \n",
    "        X += theta*(mu-X)*dt + sigma*np.sqrt(X)*dB[j]\n",
    "        X_em_small.append(X)\n",
    "    if plot == 'True':\n",
    "        plt.figure(figsize=(12,8)) \n",
    "        plt.plot(t, X_em_small, label=\"EM ($X_t$): Fine Grid\", color=pal[0], ls='--')\n",
    "        plt.title('E-M Approximation'); plt.xlabel('t'); plt.legend(loc = 2);\n",
    "    return(X_em_small)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[3.4748828100477307,\n",
       " 2.876338593867947,\n",
       " 1.9921291778247796,\n",
       " 2.456834722946062,\n",
       " 2.444786570719039,\n",
       " 2.527292503701484,\n",
       " 2.1094183034700116,\n",
       " 2.112851656780751,\n",
       " 2.503065792326646,\n",
       " 2.4733779145969175]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "em_approx_small (3, 4, 3, 1, 'True')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Ground Truth Check"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setting the Parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a = 6\n",
      "b = 5\n",
      "sigma = 1\n",
      "lambda_0 = 3\n"
     ]
    }
   ],
   "source": [
    "print('a =', theta)\n",
    "print('b =', mu)\n",
    "print('sigma =', sigma)\n",
    "print('lambda_0 =', X0)\n",
    "a = theta\n",
    "b = mu\n",
    "lambda_0 = X0"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Empirical Mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Empirical Mean/Lambda = 2.981338237915162\n"
     ]
    }
   ],
   "source": [
    "#Empirical Mean of CIR\n",
    "#Simulate 100 times\n",
    "loop_em_small = []\n",
    "for p in range(0,100):\n",
    "    loop_em_res = em_approx_small (3, 4, 3, 1, 'False')\n",
    "    loop_em_small.append(loop_em_res)\n",
    "\n",
    "\n",
    "emp_mean = np.mean(loop_em_small)\n",
    "print ('Empirical Mean/Lambda =', emp_mean)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Theoretical Mean\n",
    "\\begin{align}\n",
    "    E[\\lambda_t] &=   e^{-at} \\lambda_0 + b(1 - e^{-at} )\n",
    "\\end{align}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Theoretical Mean = 4.757329172535767\n"
     ]
    }
   ],
   "source": [
    "lambda_t = []\n",
    "theory_mean = np.exp(-a * t) * lambda_0 + b * (1 - np.exp(-a * t))\n",
    "lambda_t.append(theory_mean)\n",
    "\n",
    "print('Theoretical Mean =', np.mean(lambda_t))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\\begin{align}\n",
    "E[\\lambda_t] - \\hat{\\lambda} = \\rho\n",
    "\\end{align}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Difference between Empirical and Theory =  -1.7759909346206055\n"
     ]
    }
   ],
   "source": [
    "rho = emp_mean - np.mean(lambda_t)\n",
    "\n",
    "print ('Difference between Empirical and Theory = ', (rho))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Simulating Point process with CIR using thinning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Parameters and Settings\n",
    "def sim_point_process(length_events, x_em_res):\n",
    "#Num_events is how long we want to simulate it for \n",
    "    length_events = N\n",
    "    \n",
    "#Start at time = 0\n",
    "    event_time = 0\n",
    "#Lambda\n",
    "    _lambda = []\n",
    "    for t in range (0, length_events):\n",
    "        cox_lambda = x_em_res[t]\n",
    "        _lambda.append(cox_lambda)\n",
    "\n",
    "    \n",
    "    return('N_t =', _lambda)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Simulate it 'p' times"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "result = []\n",
    "for p in range (10000):\n",
    "    em = em_approx_small(4, 6, 5, 1, 'False')\n",
    "    res = sim_point_process(N, em)\n",
    "    result.append(res)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Take the average"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "average_result = [i[1] for i in result] # remove N't\n",
    "\n",
    "final_Nt = []\n",
    "for j in range(N):\n",
    "    temp = [i[j] for i in average_result]\n",
    "    final_Nt.append(np.mean(temp))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "final = final_Nt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Binning the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def inter_arrival_point_process(N, _lambda, tau, plot = 'True'):\n",
    "    event_num = []\n",
    "    inter_event_times = []\n",
    "    event_time = 0\n",
    "    event_times = []\n",
    "    for i in range(len(N)):\n",
    "        event_num.append(i)\n",
    "#Get a random probability value from the uniform distribution's PDF\n",
    "        n = random.random()\n",
    "\n",
    "#Generate the inter-event time from the exponential distribution's CDF using the Inverse-CDF technique\n",
    "        inter_event_time = -math.log(1.0 - n) / _lambda[i]\n",
    "        inter_event_times.append(inter_event_time)\n",
    "\n",
    "#Add the inter-event time to the running sum to get the next absolute event time\n",
    "        event_time = event_time + inter_event_time\n",
    "        event_times.append(event_time)\n",
    "\n",
    "   \n",
    "    interval_nums = []\n",
    "    num_events_in_interval = []\n",
    "    interval_num = 1\n",
    "    num_events = 0\n",
    "\n",
    "    for i in range(len(event_times)):\n",
    "        event_time = event_times[i]\n",
    "        if event_time <= interval_num:\n",
    "            num_events += 1\n",
    "        else:\n",
    "            interval_nums.append(interval_num)\n",
    "            num_events_in_interval.append(num_events)\n",
    "\n",
    "            interval_num += 1\n",
    "            num_events = 1\n",
    "#Binning the data\n",
    "#Setting tau/size of interval\n",
    "    interval_nums = []\n",
    "    num_events_in_interval = []\n",
    "    #Start\n",
    "    interval_num = tau\n",
    "    num_events = 0\n",
    "\n",
    "    for i in range(len(event_times)):\n",
    "        event_time = event_times[i]\n",
    "        if event_time <= interval_num:\n",
    "            num_events += 1\n",
    "        else:\n",
    "            interval_nums.append(interval_num)\n",
    "            num_events_in_interval.append(num_events)\n",
    "\n",
    "\n",
    "            interval_num += tau\n",
    "\n",
    "            num_events = 1\n",
    "            \n",
    "    if plot == 'True':\n",
    "#plot the inter-event times\n",
    "        fig = plt.figure()\n",
    "        fig.suptitle('Times between consecutive events in a simulated Cox process')\n",
    "        plot, = plt.plot(event_num, inter_event_times, 'bo-', label='Inter-event time')\n",
    "        plt.legend(handles=[plot])\n",
    "        plt.xlabel('Index of event')\n",
    "        plt.ylabel('Time')\n",
    "        plt.show()\n",
    "    #Plot the absolute event times\n",
    "        fig = plt.figure()\n",
    "        fig.suptitle('Absolute times of consecutive events in a simulated Cox process')\n",
    "        plot, = plt.plot(event_num, event_times, 'bo-', label='Absolute time of event')\n",
    "        plt.legend(handles=[plot])\n",
    "        plt.xlabel('Index of event')\n",
    "        plt.ylabel('Time')\n",
    "        plt.show()\n",
    "\n",
    "        #Plot the number of events in consecutive intervals\n",
    "        fig = plt.figure()\n",
    "        fig.suptitle('Number of events occurring in consecutive intervals in a simulated Cox process')\n",
    "        plt.bar(interval_nums, num_events_in_interval)\n",
    "        plt.xlabel('Index of interval')\n",
    "        plt.ylabel('Number of events')\n",
    "        plt.show()\n",
    "\n",
    "    return (num_events_in_interval)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Ground Truth check using E[N_t]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\\begin{align}\n",
    "    E(N_t) &= \\int^t_0 e^{-at} \\lambda_0 + b(1 - e^{-at} ) dt \\\\\n",
    "    &= \\left[ \\frac{e^{-at} \\lambda_0}{a} + b(t - \\frac{e^{-at}}{a}) \\right]^t_0 \\\\\n",
    "    &=  \\left[ \\frac{e^{-at} \\lambda_0}{a} + b(t - \\frac{e^{-at}}{a}) \\right] - \\left[ \\frac{\\lambda_0}{a} + b(-\\frac{1}{a}) \\right] \\\\\n",
    "    &=  \\left[ \\frac{e^{-at} \\lambda_0}{a} + b(t - \\frac{e^{-at}}{a})  - \\frac{\\lambda_0}{a} + \\frac{b}{a}) \\right]\n",
    "\\end{align}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Theorectical counts = [0.65039612 1.23293526 1.7782337  2.30309402 2.81673764 3.32422543\n",
      " 3.82833481 4.33059008 4.83182781 5.33250708]\n",
      "Empirical counts =  48.66166165457669\n"
     ]
    }
   ],
   "source": [
    "N = t\n",
    "theory_counts = ((np.exp(-a * t) * lambda_0) / a) + b * (t - (np.exp(-a * t) / a))  - (lambda_0 / a) + (b / a) \n",
    "\n",
    "print('Theorectical counts =', theory_counts)\n",
    "print('Empirical counts = ', np.sum(final) )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Moment Matching"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We want to show that a Poisson process that are binned in $\\tau$ size intervals are Poisson distributed with parameters $\\lambda\\tau$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Given that $\\lambda$ is a CIR process:\n",
    "$$dr_t = a(b-r_t)dt + \\sigma \\sqrt{r_t} dW_t$$\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## First Moment\n",
    "The expectation of the number of events $N_t$  for a Cox process is given by\n",
    "\\begin{align}\n",
    "    E(N_t) &= \\int^t_0 e^{-at} \\lambda_0 + b(1 - e^{-at} ) dt \\\\\n",
    "    &= \\left[ \\frac{e^{-at} \\lambda_0}{a} + b(t - \\frac{e^{-at}}{a}) \\right]^t_0 \\\\\n",
    "    &=  \\left[ \\frac{e^{-at} \\lambda_0}{a} + b(t - \\frac{e^{-at}}{a}) \\right] - \\left[ \\frac{\\lambda_0}{a} + b(-\\frac{1}{a}) \\right]\n",
    "\\end{align}\n",
    "The expectation of the number of events $N_t$ given an interval $\\tau$ is given by\n",
    "\\begin{align}\n",
    "      \\mathbb{E}[N_{t+\\tau} - N_t] \\\\\n",
    "    &= \\frac{\\lambda_0}{a}\\left[e^{-a{(t+\\tau)}}  - e^{-at} \\right] + b\\left[ (t + \\tau)  - t +  \\frac{1}{a}\\left(e^{-at} - e^{-a(t+\\tau)} \\right) \\right] \\\\\n",
    "    &=  \\frac{\\lambda_0}{a}\\left[e^{{(- at -a \\tau)}}  - e^{-at} \\right] + b\\left[  \\tau +  \\frac{1}{a}\\left(e^{-at} - e^{-at - a\\tau} \\right) \\right]  \\\\\n",
    "    &=  \\frac{\\lambda_0}{a} e^{-at} \\left[e^{a(t-\\tau)+at} -1 \\right] + b\\left[  \\tau  + \\frac{1}{a}(-e^{-at}) \\left(e^{a(t-\\tau)+at} - 1  \\right) \\right]  \\\\\n",
    "    &=  \\frac{e^{-at} \\lambda_0}{a}  \\left[e^{a(t-\\tau)+at} -1 \\right] +  b\\left[  \\tau  -\\frac{e^{-at}}{a} \\left(e^{a(t-\\tau)+at} - 1  \\right) \\right] \\\\\n",
    "    &=  \\frac{e^{-at} \\lambda_0}{a}  \\left[e^{a(t-\\tau)+at} -1 \\right]   - \\frac{ e^{-at}b}{a} \\left(e^{a(t-\\tau)+at} - 1  \\right)  +  b  \\tau \\\\\n",
    "    &= \\left(e^{a(t-\\tau)+at} -1 \\right) \\left[ \\frac{e^{-at} \\lambda_0}{a} - \\frac{ e^{-at}b}{a}  \\right] +b\\tau \\\\\n",
    "    &= \\left(e^{a(t-\\tau)+at} -1 \\right) \\left( \\frac{e^{-at}}{a} \\right) [\\lambda_0 - b] +b\\tau\n",
    "\\end{align}\n",
    "The long expectation of the number of events $N_t$ given an interval $\\tau$ is given by\n",
    "\\begin{align}\n",
    "w^{\\tau}_1 &= \\lim_{t \\rightarrow \\infty} \\mathbb{E}[N_{t+\\tau} - N_t] \\\\\n",
    "&= b\\tau\n",
    "\\end{align}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Verifying the First Moment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 648x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Keeping the results\n",
    "tau = 1\n",
    "inter_arrive = inter_arrival_point_process(N, final, tau, 'True')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[2, 6]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "inter_arrive"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tau = 1\n",
      "b = 5\n",
      "Events in each bin = [2, 6]\n",
      "Number of bins= 2\n",
      "Average number of events in each bin = 4.0\n",
      "b * tau = 5\n"
     ]
    }
   ],
   "source": [
    "#To check if its true, we compare it to the mean of the average number of events in each bin\n",
    "print('Tau =', tau)\n",
    "print('b =', b)\n",
    "print('Events in each bin =', inter_arrive)\n",
    "print('Number of bins=', len(inter_arrive))\n",
    "print('Average number of events in each bin =', np.mean (inter_arrive))\n",
    "print ('b * tau =', b*tau)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Plot on modified Q-Q plot\n",
    "##Need to code up CIR distribution and compare to the num of events in each interval\n",
    "### Chi inverse square?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Second Moment"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Verifying Second Moment"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Given that\n",
    "The expectation of the number of events $N_t$  for a Cox process is given by\n",
    "\\begin{align}\n",
    "    E(N_t) &=  \\left[ \\frac{e^{-at} \\lambda_0}{a} + b(t - \\frac{e^{-at}}{a}) \\right] - \\left[ \\frac{\\lambda_0}{a} + b(-\\frac{1}{a}) \\right]\n",
    "\\end{align}\n",
    "\\begin{align}\n",
    "    \\bar{w_2} &= \\lim_{t \\rightarrow \\infty} E[(N_{t + \\tau} - N_t)^2] -  (E[N_{t + \\tau} - N_t])^2 \\\\\n",
    "    &= \n",
    "\\end{align}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Sanity Check for the E(Nt) squared"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Theoretical"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#E(N_t)^2\n",
    "t = 10\n",
    "ent_squared =((np.exp(-a*t*lambda_0))/a + b*(t - ( np.exp(-a*t))/a ) -lambda_0/a + b/a ) **2\n",
    "print('Theoretical counts for ENt squared =', ent_squared)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#E(N_(t+tau))^2 wrong\n",
    "ent_tau_squared = (b**2 * np.exp(-4 * a * (t+tau)))/a**2 - (2*b**2 * np.exp(-2*a * (t+tau)))/a**2 + b**2/a**2 + (2 * b * lambda_0 * np.exp(-3 * a * (t+tau)))/a**2 - (2 * b * np.exp(-2*a * (t+tau)) * lambda_0 * np.exp(-a * (t+tau)))/a**2 + (2 * b * lambda_0 * np.exp(-a*(t+tau)))/a**2 - (2 * b * lambda_0)/a**2 + (lambda_0**2 * np.exp(-2*a * (t+tau)))/a**2 -(2*lambda_0**2 * np.exp(-a * (t+tau)))/a**2 + lambda_0**2/a**2 + (2*b**2 * (t+tau) * np.exp(-2*a * (t+tau)))/a - (2*b**2 * (t+tau))/a - (2 * b * lambda_0 * (t+tau) * np.exp(-a * (t+tau)))/a + (2 * b * lambda_0 * (t+tau))/a + b**2 * (t+tau)**2\n",
    "print('Theoretical Coounts for ENt+tau squared =',ent_tau_squared)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Theoretical Variance\n",
    "theory_var = (2*lambda_0*b*tau/a) \n",
    "print(theory_var)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Empirical"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$ E [N_t] $$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('Empirical counts for ENt = ', np.sum(final) )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('Empirical counts for ENt squared = ', np.sum(final)**2 )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$ E [ N_{t+\\tau}] $$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "emp_ent_tau = [x+tau for x in final]\n",
    "print('ENt+tau = ', np.sum(emp_ent_tau))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#ent_tau squared\n",
    "print('ENt+tau squared = ', np.sum(emp_ent_tau)**2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Empirical Variance\n",
    "emp_var = (np.sum(emp_ent_tau)**2 -  np.sum(final)**2) - (b*tau)**2\n",
    "\n",
    "print(emp_var)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Empitical - Theoretical\n",
    "#Should be close to 0\n",
    "check2 = emp_var - theory_var\n",
    "print(check2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Plot on modified Q-Q plot\n",
    "##The line is the Non-Central Chi Square distribution\n",
    "###The sparam represents the parameter of the distribution\n",
    "#fig = plt.figure()\n",
    "#ax = fig.add_subplot(111)\n",
    "#stats.probplot(counts, sparams=(b * tau),  dist= stats.poisson, fit=True, plot= ax)\n",
    "#ax.set_title(\"Probplot for Cox distribution with shape parameter $b$  $\\\\tau$\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
